PROGRAMAÇÃO ORIENTADA A OBJETOS:

-> Uma abordagem para projetar e construir aplicações que são:
   - Flexiveis;
   - Naturais;
   - Bem elaboradas;
   - Testaveis;


INDENTIFICANDO CLASSES DE REQUESITOS:

-> Você recebeu uma solicitação por e-mail de uma amiga veterinária informando que está com problemas para gerenciar 
os atendimentos dos pets na mensagem ela diz que gostaria de ter registro dos animais que precisa também dos dados dos parceiros
veterinários que atendem no centro clínico para poder saber quais médicos atenderam quais animais em um determinado período de tempo 
ou até mesmo registrar quais procedimentos foram realizados com os animais nos últimos atendimentos.

-> Primeiro Passo: inicie os nomes: Quais são as palavras-chaves informadas no requisitos que são essenciais a resolver
 				   o probleminha de nossa amiga veterinaria.

- Gerencia, atendimento dos pets, registros dos animais, parceiros veterinarios, Periodo de tempo (atendimento).

-> Segundo Passo: Defina os membros apropriados: - Quais são as Propriedades (dados) e os Métodos (operações) fundamentais 
						para Iniciar a construção deste software?: 
						- Descreva quais as propriedades necessárias 
						para sua proposta pensando nas seguintes entidades:


pets/Animais: nome, peso, raça, especie, porte, data de nascimento, responsavel, telefone_responsavel.
Veterinario: nome, CPF, genero, email, telefone, CRM.
Atendimento: horario, tempo de atendimento, tipo de serviços (banho, tosa, atendimento clinico, sacrificio), veterinario, Animal, preço.
Clinica: tipo de local, endereço (rua, numero, bairro, cep, cidade, UF).

-> O EFEITO TEMPO:
  
   - Considere a efeito TEMPO em sua aplicação, com o passar dos anos es dados podem sofrer alterações, 
   o responsável por um animal pode mudar, ut telefone ou e-mail por exemplo.

   - O TEMPO é uma quarta dimensão a ser considerada, se algum dado do veterinária, da clinica ou do animal for alterado,
   isto influenciarla nos dados armazenados de atendimento?

   - Utiliza sempre as conceitor de abstração e encapsulaments para responder a estas perguntas!

-> ABSTRAÇÃO:

   - O processo de abstração dependerá dos requisitos da aplicação. Em nosso caso, temos a ENTIDADE Veterinário,
   onde far-se necessário registrar poucos dedos (Nome, Email, Telefone, CRM) devido ao escopo reduzido do problema, mas,
   se estivéssemos modelando am sistema mais robusto para aplicações diversas, certamente precisaríamos de mais informações sob
   o vererinário, como endereço, especialidade, etc.

   - É o processo de definir classes simplificando a realidade, ignorando detalhes desnecessários e focando apenas no que é
   relevante so escopo da aplicação.

   - É um dos pilares da POO/OOP;

-> ENACPSULAMENTO:
 
   - Outro pilar da programação OO.
   
   - Tecnica para 'esconder' os dados e os detalhes da implementação em uma classe.
 
   - Utilizado para garantir que os outros codigos do sistema não se preocupem em saber os detalhes da implementação.

   - Estas propriedades são disponibilizadas para o resto do sistema 


---------------------------------------------------

var c1 = new custumer();
c1.FirstName = "Bilbo";

var c2 = c1;
c2.FirstName = "Frodo";

---------------------------------------------------

STATIC:

- O modificador static declara um membro que pertence a classe em si mesma e não ao objeto.
- Util para rastrear informações compartilhadas emtre todas as instancias do objeto daquele tipo.
- Para acessar atributos estaticos referenciamos a tipo propriedade.
